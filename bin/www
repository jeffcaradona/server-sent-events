#!/usr/bin/env node

/**
 * Module dependencies.
 */
import { configDotenv } from 'dotenv';

import app, { shutdown } from '../src/app.js';
import debugLib from 'debug';
const debug = debugLib("server-sent-events:server");
import http from 'http'
import logger, { serverLogger } from '../src/utils/logger.js'; // winston logger


configDotenv();
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      serverLogger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      serverLogger.error(bind + ' is already in use');
      process.exit(1);
      break;  
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  const url = `http://localhost:${addr.port}`;
  debug('Listening on ' + bind);
  debug(`Server is running at ${url}`);
  
  // Add server startup log
  serverLogger.info(`Server started and listening on ${url}`);
}

async function handleShutdown() {
  serverLogger.info("Received shutdown signal, cleaning up...");
  if (typeof shutdown === 'function') shutdown();
  
  // Wait 1000ms to allow events to flush, then exit
  setTimeout(() => {
    process.exit(0);
  }, 5000); // Increased to 5000ms to ensure messages are sent
}

process.on('SIGTERM', handleShutdown);
process.on('SIGINT', handleShutdown);
